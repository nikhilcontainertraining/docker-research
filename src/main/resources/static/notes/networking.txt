Docker networking
--------------------------------------------------------------------

3 types
 - container    to  WWW
 - container    to  local-host(hosting machine)
 - container    to container


--------------------------------------------------------------------
Container to WWW
--------------------------------------------------------------------

by default all docker containers can reach WWW without additional configuration


gradle clean build && docker build -t dr:www .

docker run -p 8080:8080 \
           -v joke_vol_v1:/app/joke_vol \
           -v "/Users/nikhilhiremath/Documents/Engineering/CKAD/Docker/apps/12-30/container_meta_data:/app" \
           --name dr-www-v1 \
           dr:www



--------------------------------------------------------------------
Container to Host Machine
--------------------------------------------------------------------

- docker networking module does not understand interpret localhost as host-machine
- since it itself is a localhost
- host machine domain is identified by --> "host.docker.internal"

-----
application.properties

    spring.datasource.url=jdbc:mysql://host.docker.internal:3306/card_repository
    spring.datasource.username=root
    spring.datasource.password=Mig5@mig5


-----
gradle clean build && docker build -t dr:host-connection .

-----
docker run -p 8080:8080 \
           -v joke_vol_v1:/app/joke_vol \
           -v "/Users/nikhilhiremath/Documents/Engineering/CKAD/Docker/apps/12-30/container_meta_data:/app" \
           --name dr-con-host \
           dr:host-connection


--------------------------------------------------------------------
Container to Container
--------------------------------------------------------------------

- spinning a mysql in a docker container
- "dr-con-to-con" container is connected to mysql database in dedicated "mysql-con" container


---------------
MYSQL container
---------------
docker run -it \
           --name mysql-con \
           -e MYSQL_ROOT_PASSWORD=Mig5@mig5 \
           -u root \
           mysql

docker exec -it mysql-con bash

-- inside bash
mysql -u root -p


-----
docker container inspect mysql-con

- fetch the IP address of the container

------------------------------
Docker-Research container
------------------------------

gradle clean build && docker build -t dr-img:c2c .

- build the image with changes

-----
docker run -p 8080:8080 --name dr-con-c2c dr-img:c2c



------------------------------------------------------------
creating docker network
------------------------------------------------------------

- a "docker network" is be created for efficiently handling container communication/networking configuration
- for ex., the is NO need to inspect "mysql-con" or any other container to fetch the IP address
- to get around the provider and consumer container/s must be within the same network
- unlike docker volume network is created by default if passed with the command
- has to be explicitly created
- then concerned containers must be started with "--network" argument in the "docker run" command
- the consumer container shall use the produced container name in the host domain instead of ip or "docker.host.internal"

---------------------------------------------
docker network create docker-research-network

docker run -it \
           --network docker-research-network \
           --name mysql-con \
           -e MYSQL_ROOT_PASSWORD=Mig5@mig5 \
           -u root \
           -d \
           mysql

- in the app the host/domain part of URL should be name of the container which you wish to connect
- here ip-address or localhost is changed to "mysql-con"
- "jdbc:mysql://mysql-con:3306/card_repository"

gradle clean build && docker build -t dr-img:network .

docker run --network docker-research-network -p 8080:8080 --name dr-con-network dr-img:network

---------------------------------------------



